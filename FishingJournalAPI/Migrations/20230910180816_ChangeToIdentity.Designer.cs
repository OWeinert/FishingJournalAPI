// <auto-generated />
using System;
using FishingJournal.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishingJournal.API.Migrations
{
    [DbContext(typeof(FishingJournalDbContext))]
    [Migration("20230910180816_ChangeToIdentity")]
    partial class ChangeToIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.FishType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FishTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.HookSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HookSizes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.HookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HookTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("AirPressure")
                        .HasColumnType("REAL");

                    b.Property<int>("AirPressureTendency")
                        .HasColumnType("INTEGER");

                    b.Property<float>("AirTemperature")
                        .HasColumnType("REAL");

                    b.Property<string>("BaitInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CatchPlaceImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<short>("FeedDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeedInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FishImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FishNickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FishTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HookSizeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HookTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("RigTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WaterCurrentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaterSurfaceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("WaterTemperature")
                        .HasColumnType("REAL");

                    b.Property<int>("WeatherTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.Property<int>("WindDirection")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("WindStrength")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FishTypeId");

                    b.HasIndex("HookSizeId");

                    b.HasIndex("HookTypeId");

                    b.HasIndex("RigTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WaterCurrentTypeId");

                    b.HasIndex("WaterSurfaceTypeId");

                    b.HasIndex("WeatherTypeId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.RigType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RigTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WaterCurrentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WaterCurrentTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WaterSurfaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WaterSurfaceTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WeatherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WeatherTypes");
                });

            modelBuilder.Entity("FishingJournal.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasAlternateKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.JournalEntry", b =>
                {
                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.FishType", "FishType")
                        .WithMany("Parents")
                        .HasForeignKey("FishTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.HookSize", "HookSize")
                        .WithMany("Parents")
                        .HasForeignKey("HookSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.HookType", "HookType")
                        .WithMany("Parents")
                        .HasForeignKey("HookTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.RigType", "RigType")
                        .WithMany("Parents")
                        .HasForeignKey("RigTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.User", "User")
                        .WithMany("JournalEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.WaterCurrentType", "WaterCurrentType")
                        .WithMany("Parents")
                        .HasForeignKey("WaterCurrentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.WaterSurfaceType", "WaterSurfaceType")
                        .WithMany("Parents")
                        .HasForeignKey("WaterSurfaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingJournal.API.Models.JournalEntryModels.WeatherType", "WeatherType")
                        .WithMany("Parents")
                        .HasForeignKey("WeatherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishType");

                    b.Navigation("HookSize");

                    b.Navigation("HookType");

                    b.Navigation("RigType");

                    b.Navigation("User");

                    b.Navigation("WaterCurrentType");

                    b.Navigation("WaterSurfaceType");

                    b.Navigation("WeatherType");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.FishType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.HookSize", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.HookType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.RigType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WaterCurrentType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WaterSurfaceType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.JournalEntryModels.WeatherType", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("FishingJournal.API.Models.User", b =>
                {
                    b.Navigation("JournalEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
